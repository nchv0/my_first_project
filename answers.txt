1. Три основные области Git — это рабочая папка, индекс и репозиторий. Рабочая папка содержит текущие файлы, в которых вы вносите изменения; индекс (staging area) — это промежуточная область, куда вы добавляете файлы перед коммитом; а репозиторий хранит всю историю коммитов. Каждая область служит своей цели: от редактирования до подготовки и окончательного сохранения версий.

2. Команда git add помещает изменения из рабочей папки в индекс, подготавливая их к коммиту. git commit создает новый коммит из проиндексированных изменений и сохраняет его в локальный репозиторий. git push отправляет ваши коммиты из локального репозитория в удаленный, чтобы другие разработчики могли видеть ваши изменения.

3. Информативные сообщения к коммитам важны потому, что они объясняют цель изменений, а не просто констатируют факт правки. Это помогает разработчикам, включая вас самих в будущем, быстро понять историю проекта, найти нужные изменения и эффективноCollaborate, экономя время и уменьшая недопонимание.

4. git add имя_файла добавляет в индекс только указанный файл, что полезно для выборочного коммита отдельных изменений. git add . добавляет все измененные и новые файлы в текущей директории, что удобно, когда все правки логически связаны и должны попасть в один коммит.

5. Команда git status показывает текущее состояние рабочей папки и индекса. Ее вывод меняется в зависимости от ваших действий: сначала она отображает неотслеживаемые или измененные файлы, после git add — файлы, готовые к коммиту, а после коммита сообщает, что неотложных изменений нет.

6. Команда git remote add origin URL добавляет связь с удаленным репозиторием по указанному адресу и дает ему псевдоним origin. Слово "origin" — это стандартное, общепринятое имя для основного удаленного репозитория проекта, которое используется в дальнейших командах, таких как push или pull.

7. Флаг -u в команде git push -u origin main при первой отправке устанавливает upstream-связь между вашей локальной веткой main и удаленной веткой на origin. После этого Git запоминает эту связь, и в дальнейшем вы можете использовать просто git push или git pull без дополнительных аргументов.

8. Ветка по умолчанию — это основная ветка в репозитории, в которую обычно интегрируются новые функции. Исторически она называлась master, но сейчас по умолчанию создается как main в рамках движения за более инклюзивную терминологию. Это важно, так как она представляет собой основную линию разработки и часто защищена правилами слияния.

9. Историю коммитов можно просмотреть с помощью git log. Для каждого коммита вы видите его уникальный хеш, автора, дату создания и сообщение коммита. С дополнительными флагами можно также увидеть изменения в файлах или компактное представление истории.

10. Если вы сделаете изменения в файле, но не выполните git add перед git commit, то эти изменения не будут включены в новый коммит. Git сообщит, что в индексе нет подготовленных изменений для коммита, и ваши правки останутся только в рабочей папке как не проиндексированные.